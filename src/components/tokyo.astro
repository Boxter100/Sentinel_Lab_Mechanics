---
const { id = "modelo1", modelPath = "/models/rita5.glb", background = "#f0f0f0" } = Astro.props;
---

<div id={id} class="w-[50%] h-[100vh]" style={`background-color: ${background};`}></div>

<script>
  // Obtener los datos del componente
  const container = document.getElementById('modelo1'); // ID
  
  // Importar Three.js directamente en el script
  import * as THREE from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

  // Configurar la escena
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xf0f0f0); // Color de fondo

  // Configurar la cámara
  const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000); // Ángulo de visión, relación de aspecto, distancia mínima y máxima
  camera.position.set(0, 0, 50); // Posición de la cámara

  // Configurar el renderer
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(container.clientWidth, container.clientHeight);
  container.appendChild(renderer.domElement);

// Luz ambiental suave
const ambientLight = new THREE.AmbientLight(0x404040, 0.5); // color, intensidad
scene.add(ambientLight);

// Luz direccional principal (como el sol)
const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(1, 1, 1).normalize();
scene.add(directionalLight);

// Luz lateral adicional
const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);
directionalLight2.position.set(-1, 0.5, -1).normalize();
scene.add(directionalLight2);

  // Añadir controles orbitales
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;

  // Cargar el modelo
  const loader = new GLTFLoader();
  loader.load('/models/rita5.glb', (gltf) => {
    scene.add(gltf.scene);
  }, undefined, (error) => {
    console.error('Error cargando modelo:', error);
  });

  // Función de animación
  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
  }

  // Iniciar animación
  animate();

  // Manejar redimensionamiento
  window.addEventListener('resize', () => {
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
  });
</script>
